import logging
import requests
import os
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type
import socket
import json
from project.customized_verison.saving_history_to_txt import CustomEncoder
# Setup logging
logging.basicConfig(level=logging.DEBUG)
logging.getLogger('requests').setLevel(logging.DEBUG)

# Configurations

def serialize_store(store):
    """
    Serializes the store history object using a custom encoder.

    Parameters:
    - store: The object to serialize.

    Returns:
    - JSON string representing the serialized store.
    """
    return json.dumps(store, cls=CustomEncoder)

# Payload creation functions
def q_and_a_payload(filterd_text,history):
    """
    Creates a payload for the Q&A API.

    Parameters:
    - filterd_text: The filtered text or answer generated by the chatbot.
    - history: The session history to be included in the payload.

    Returns:
    - Dictionary containing the Q&A payload.
    """
   
    history = serialize_store(history)
    return {
            "answer":filterd_text,
            "history":history
    }

# REST call function with retry logic
@retry(stop=stop_after_attempt(3), wait=wait_fixed(5), retry=retry_if_exception_type(socket.timeout))
def make_rest_call_userbackend(end_point, json_payload):
    """
    Makes a POST request to the user backend with retry logic.

    Parameters:
    - end_point: The endpoint URL where the POST request will be sent.
    - json_payload: The payload to be sent in the POST request.

    Returns:
    - The JSON response from the server, or None if the request fails.
    """
    headers = {'Content-Type': 'application/json'}
    try:
        logging.debug(f"Sending payload:\n {json_payload}")
        response = requests.post(end_point, headers=headers, json=json_payload)
        response.raise_for_status()  # Raise an exception for HTTP errors
        result = response.json()
        logging.info(f"Response received:\n {json_payload}")
        return result
    except requests.exceptions.RequestException as e:
        logging.error(f"Request failed:\n {e} with payload: \n{json_payload} & url:\n{end_point}")
        return None

